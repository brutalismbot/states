---
StartAt: Parallelize
States:
  Parallelize:
    Type: Parallel
    Next: PutEvents
    ResultSelector:
      EventBusName: ${event_bus_name}
      Source: reddit
      DetailType: post/slack/channel
      Detail:
        AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: $$.Execution.Id
        POST.$: $[0]
        SLACK.$: $[1]
    Branches:
      - StartAt: GetLastPostName
        States:
          GetLastPostName:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:dynamodb:getItem
            Next: GetLastPost
            ResultSelector:
              NAME.$: $.Item.NAME.S
            Parameters:
              TableName: ${table_name}
              ProjectionExpression: "#NAME"
              ExpressionAttributeNames:
                "#NAME": NAME
              Key:
                GUID:
                  S: STATS/MAX
                SORT:
                  S: REDDIT/POST
          GetLastPost:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:dynamodb:getItem
            Next: TransformPost
            ResultSelector:
              DATA.$: States.StringToJson($.Item.JSON.S)
              CREATED_UTC.$: $.Item.CREATED_UTC.S
              NAME.$: $.Item.NAME.S
              PERMALINK.$: $.Item.PERMALINK.S
              TITLE.$: $.Item.TITLE.S
              TTL.$: States.StringToJson($.Item.TTL.N)
            Parameters:
              TableName: ${table_name}
              ProjectionExpression: CREATED_UTC,JSON,#NAME,PERMALINK,TITLE,#TTL
              ExpressionAttributeNames:
                "#NAME": NAME
                "#TTL": TTL
              Key:
                GUID:
                  S.$: $.NAME
                SORT:
                  S: REDDIT/POST
          TransformPost:
            Type: Task
            Resource: ${slack_transform_function_arn}
            End: true
            InputPath: $.DATA
            ResultPath: $.DATA
            Retry:
              - BackoffRate: 2
                IntervalSeconds: 3
                MaxAttempts: 4
                ErrorEquals:
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.ServiceException
                  - Lambda.Unknown
      - StartAt: GetSlack
        States:
          GetSlack:
            Type: Pass
            End: true
            Parameters:
              ACCESS_TOKEN.$: $.access_token
              APP_ID.$: $.app_id
              CHANNEL_ID.$: $.incoming_webhook.channel_id
              CHANNEL_NAME.$: $.incoming_webhook.channel
              TEAM_ID.$: $.team.id
              TEAM_NAME.$: $.team.name
              WEBHOOK_URL.$: $.incoming_webhook.url
      - StartAt: GetDynamoDBItem
        States:
          GetDynamoDBItem:
            Type: Pass
            Next: PutDynamoDBItem
            Parameters:
              SORT:
                S: SLACK/AUTH
              ACCESS_TOKEN:
                S.$: $.access_token
              APP_ID:
                S.$: $.app_id
              CHANNEL_ID:
                S.$: $.incoming_webhook.channel_id
              CHANNEL_NAME:
                S.$: $.incoming_webhook.channel
              CREATED_UTC:
                S.$: $$.Execution.StartTime
              GUID:
                S.$: States.Format('{}/{}/{}', $.app_id, $.team.id, $.incoming_webhook.channel_id)
              JSON:
                S.$: $
              SCOPE:
                S.$: $.scope
              TEAM_ID:
                S.$: $.team.id
              TEAM_NAME:
                S.$: $.team.name
              USER_ID:
                S.$: $.authed_user.id
              WEBHOOK_URL:
                S.$: $.incoming_webhook.url
          PutDynamoDBItem:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:dynamodb:putItem
            End: true
            Parameters:
              TableName: ${table_name}
              Item.$: $
  PutEvents:
    Type: Task
    Resource: arn:aws:states:::events:putEvents
    End: true
    Parameters:
      Entries.$: States.Array($)
